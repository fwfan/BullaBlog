{"version":3,"sources":["pages/Home/Tag.js","pages/Home/Article.js","pages/Home/ListItem.js","pages/Home/Home.js","pages/About/About.js","App.js","serviceWorker.js","index.js"],"names":["Tag","props","state","Component","Article","ListItem","this","title","time","tag","article","Home","content","fetch","method","then","res","text","data","console","log","setState","getData","className","id","About","App","href","to","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+TAoBeA,G,kBAjBX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,GAFC,E,sEASd,OACI,6BACI,mD,GAZEC,cCiBHC,E,YAhBX,WAAYH,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAO,GAFE,E,sEAQd,OACI,6BACI,qf,GAXMC,aCwBPE,E,YArBX,WAAYJ,GAAO,IAAD,8BACd,4CAAOA,KACFC,MAAQ,GAFC,E,sEAOR,IAAD,EACgCI,KAAKL,MAAlCM,EADH,EACGA,MAAOC,EADV,EACUA,KADV,EACgBC,IADhB,EACqBC,QAC1B,OACI,6BACI,4BAAKH,GACL,6BAAMC,GACN,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAfOL,aC4CRQ,E,YA5CX,WAAYV,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,CACTU,QAAU,IAHA,E,uEAOR,IAAD,OACLC,MAAM,+BAAgC,CAClCC,OAAQ,QACTC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MACvB,SAAAG,GACIC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAAET,QAASM,S,2CAMjCZ,KAAKgB,Y,+BAIL,OACI,6BACI,yBAAKC,UAAU,0BACX,yBAAKA,UAAU,4BAInB,yBAAKA,UAAU,qBACX,8BACA,yBAAKC,GAAG,mBAAmBD,UAAU,sCAArC,YACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,2BACX,yBAAKA,UAAU,oCAAoCC,GAAG,qCAAtD,kB,GAtCDrB,aCUJsB,E,iLATP,OACI,6BACI,qCACA,mC,GALItB,aCmCLuB,MAhCf,WAEE,OACE,6BACE,kBAAC,IAAD,KACI,yBAAKH,UAAU,iBACb,yBAAKA,UAAU,OACb,4BACE,wBAAII,KAAK,IAAIJ,UAAU,0BACrB,kBAAC,IAAD,CAAMK,GAAG,KAAT,SAEF,wBAAID,KAAK,IAAIJ,UAAU,2BACrB,kBAAC,IAAD,CAAMK,GAAG,UAAT,aAKR,yBAAKL,UAAU,0BAEf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,WCjBMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,kB","file":"static/js/main.a91a0942.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Tag extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    render(){\r\n        \r\n        return (\r\n            <div>\r\n                <span>技术</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tag","import React, { Component } from 'react';\r\n\r\nclass Article extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state ={\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <p>在原有的新建或编辑aaa服务器时，支持单个服务器的新建和修改。前台下发新建和编辑多个aaa服务器时的数据，php进行decode时的数据类型的结果是不一样的，导致了该该问题的出现。</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Article;","import React, { Component } from 'react';\r\nimport Tag from './Tag.js'\r\nimport Article from './Article.js';\r\n\r\nclass ListItem extends Component {\r\n    constructor(props){\r\n        super (props);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { title, time, tag, article} = this.props;\r\n        return (\r\n            <div>\r\n                <h5>{title}</h5>\r\n                <div>{time}</div>\r\n                <Tag />\r\n                <Article />\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default ListItem;","import React, { Component } from 'react';\r\nimport './Home.css';\r\nimport ListItem from './ListItem.js'\r\nclass Home extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            content : []\r\n        }\r\n    }\r\n\r\n    getData(){\r\n        fetch(`/public/Index/Index/subIndex`, {\r\n            method: 'GET'\r\n        }).then(res => res.text()).then(\r\n            data => {\r\n                console.log(data);\r\n                this.setState({ content: data })\r\n            }\r\n        )\r\n\r\n    }\r\n    componentWillMount() {\r\n        this.getData();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"content-container-left\" >\r\n                    <div className=\"login-button-container\">\r\n                        \r\n                    </div>\r\n                </div>\r\n                <div className=\"content-container\" >\r\n                    <div></div>\r\n                    <div id=\"update-container\" className=\"tab-content content-container-show\">1ghjghjh</div>\r\n                    <ListItem />\r\n                    <ListItem />\r\n                </div>\r\n                <div className=\"content-container-right\" >\r\n                    <div className=\"content-container-right-ajax-test\" id=\"content-container-right-ajax-test\">ajaxtest</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React, {Component} from 'react';\r\n\r\nclass About extends Component {\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h2>About</h2>\r\n                <div></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default About;","import React from 'react';\nimport {HashRouter as Router, Route, Link, Switch} from \"react-router-dom\"\nimport Home from \"./pages/Home/Home.js\"\nimport About from \"./pages/About/About.js\"\n\nfunction App() {\n  \n  return (\n    <div>\n      <Router>\n          <div className=\"nav-container\">\n            <div className=\"nav\">\n              <ul>\n                <li href=\"/\" className=\"tab-head-home tab-head\" >\n                  <Link to=\"/\">Home</Link>\n                </li>\n                <li href=\"/\" className=\"tab-head-about tab-head\" > \n                  <Link to=\"/about\">About</Link>\n                </li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"content-container-top\" ></div>\n\n          <Switch>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route path=\"/about\">\n              <About />\n            </Route>\n          </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}